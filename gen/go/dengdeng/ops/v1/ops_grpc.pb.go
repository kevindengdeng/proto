// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpsSystemClient is the client API for OpsSystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpsSystemClient interface {
	//打印ops消息体
	Echo(ctx context.Context, in *OpsMessage, opts ...grpc.CallOption) (*OpsMessage, error)
}

type opsSystemClient struct {
	cc grpc.ClientConnInterface
}

func NewOpsSystemClient(cc grpc.ClientConnInterface) OpsSystemClient {
	return &opsSystemClient{cc}
}

func (c *opsSystemClient) Echo(ctx context.Context, in *OpsMessage, opts ...grpc.CallOption) (*OpsMessage, error) {
	out := new(OpsMessage)
	err := c.cc.Invoke(ctx, "/dengdeng.ops.v1.OpsSystem/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpsSystemServer is the server API for OpsSystem service.
// All implementations must embed UnimplementedOpsSystemServer
// for forward compatibility
type OpsSystemServer interface {
	//打印ops消息体
	Echo(context.Context, *OpsMessage) (*OpsMessage, error)
	mustEmbedUnimplementedOpsSystemServer()
}

// UnimplementedOpsSystemServer must be embedded to have forward compatible implementations.
type UnimplementedOpsSystemServer struct {
}

func (UnimplementedOpsSystemServer) Echo(context.Context, *OpsMessage) (*OpsMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedOpsSystemServer) mustEmbedUnimplementedOpsSystemServer() {}

// UnsafeOpsSystemServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpsSystemServer will
// result in compilation errors.
type UnsafeOpsSystemServer interface {
	mustEmbedUnimplementedOpsSystemServer()
}

func RegisterOpsSystemServer(s grpc.ServiceRegistrar, srv OpsSystemServer) {
	s.RegisterService(&OpsSystem_ServiceDesc, srv)
}

func _OpsSystem_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsSystemServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dengdeng.ops.v1.OpsSystem/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsSystemServer).Echo(ctx, req.(*OpsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// OpsSystem_ServiceDesc is the grpc.ServiceDesc for OpsSystem service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpsSystem_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dengdeng.ops.v1.OpsSystem",
	HandlerType: (*OpsSystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _OpsSystem_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dengdeng/ops/v1/ops.proto",
}
